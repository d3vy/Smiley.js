// Generated by CoffeeScript 1.12.2
(function() {
  var checkForSmiley, extras, fixSmiles, oppositeSmileParts, prepareSmiley, prepareSmileys, replaceString, smileParts, toggleSmiley,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  extras = {
    '<3': true,
    '&lt;3': true
  };

  smileParts = {
    'O': 'middle-mouth',
    'D': 'middle-mouth',
    'd': 'middle-mouth',
    'p': 'low-mouth',
    '*': 'high-mouth',
    '-': 'nose',
    'P': 'middle-mouth'
  };

  oppositeSmileParts = {
    'p': 'd',
    ')': '(',
    '(': ')',
    'P': 'd'
  };

  toggleSmiley = function() {
    return $(this).toggleClass('active');
  };

  prepareSmileys = function(html) {
    var extra, inverseSmileysFound, j, k, l, len, len1, len2, smiley, smileysFound;
    smileysFound = html.match(/[:Xx][-]?[\)\(OoDPp\*]/g);
    if (smileysFound) {
      for (j = 0, len = smileysFound.length; j < len; j++) {
        smiley = smileysFound[j];
        html = checkForSmiley(html, smiley, false);
      }
    }
    inverseSmileysFound = html.match(/[\(\)d][-]?:/g);
    if (inverseSmileysFound) {
      for (k = 0, len1 = inverseSmileysFound.length; k < len1; k++) {
        smiley = inverseSmileysFound[k];
        html = checkForSmiley(html, smiley, true);
      }
    }
    for (l = 0, len2 = extras.length; l < len2; l++) {
      extra = extras[l];
      html = checkForSmiley(html, extra, extras[extra]);
    }
    return html;
  };

  checkForSmiley = function(html, smiley, isReverse) {
    var index, replace;
    index = html.indexOf(smiley);
    replace = null;
    while (index >= 0) {
      if (!replace) {
        replace = prepareSmiley(smiley, isReverse);
      }
      html = replaceString(html, replace, index, index + smiley.length);
      index = html.indexOf(smiley, index + replace.length);
    }
    return html;
  };

  prepareSmiley = function(smiley, isReverse) {
    var html, i, j, ref, ref1;
    html = '<span class="smiley-wrapper">' + '<span class="smiley' + (isReverse ? ' smiley-reverse' : '') + '">';
    for (i = j = 0, ref = smiley.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if (ref1 = smiley[i], indexOf.call(smileParts, ref1) >= 0) {
        html += '<span class="' + smileParts[smiley[i]] + '">' + smiley[i] + '</span>';
      } else {
        html += smiley[i];
      }
    }
    html += '</span>' + '</span>';
    return html;
  };

  replaceString = function(string, replace, from, to) {
    return string.substring(0, from) + replace + string.substring(to);
  };

  fixSmiles = function(content) {
    return content.html(prepareSmileys(content.html()));
  };

  $(document).on('click', '.smiley', toggleSmiley);

  $.fn.smilify = function() {
    var $els;
    $els = $(this).each(function() {
      return fixSmiles($(this));
    });
    setTimeout(function() {
      return $els.find('.smiley').each(toggleSmiley);
    }, 20);
    return this;
  };

}).call(this);

//# sourceMappingURL=smiley.js.map
